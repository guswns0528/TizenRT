/****************************************************************************
 *
 * Copyright 2016 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 ****************************************************************************/
/****************************************************************************
 * configs/mikroequail/scripts/ld_stm32f427_flash.script
 *
 *   Copyright (C) 2011-2013 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <gnutt@nuttx.org>
 *           Laurent Latil <laurent@latil.nom.fr>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* The STM32F427 has FLASH beginning at address 0x0800:0000 and
 * SRAM beginning at address 0x2000:0000.
 * The bootloader change program counter to flash _stext area
 * but it checks program header before jump.
 */

MEMORY
{
    flash (rx) : ORIGIN = 0x08000000, LENGTH = 2M
    sram (rwx) : ORIGIN = 0x20000000, LENGTH = 192K
}

OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_stext)
SECTIONS
{
	.text : {
		_stext = ABSOLUTE(.);
		*(.vectors)
		*(.text .text.*)
		*(.fixup)
		*(.gnu.warning)
		*(.rodata .rodata.*)
		*(.gnu.linkonce.t.*)
		*(.glue_7)
		*(.glue_7t)
		*(.got)
		*(.gcc_except_table)
		*(.gnu.linkonce.r.*)

		. = ALIGN(4);
		PROVIDE_HIDDEN (gpio_bank_start = .);
		KEEP(*(SORT(.gpio_bank.*)))
		KEEP(*(.gpio_bank))
		PROVIDE_HIDDEN (gpio_bank_end = .);

		_etext = ABSOLUTE(.);
	} > flash

	.init_section : {
		_sinit = ABSOLUTE(.);
		*(.init_array .init_array.*)
		_einit = ABSOLUTE(.);
	} > flash

	.ARM.extab : {
		*(.ARM.extab*)
	} > flash

	__exidx_start = ABSOLUTE(.);
	.ARM.exidx : {
		*(.ARM.exidx*)
	} > flash
	__exidx_end = ABSOLUTE(.);

	/* WLBT F/W binary */
	.wlbt.fw 0x04200000 : {
	  *(.wlbt.fw*)
	} > flash

	_eronly = ABSOLUTE(.);

	.data : {
		_sdata = ABSOLUTE(.);
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
			    . = ALIGN(8);clk_dbg_node_start = .; KEEP(*(.clk_dbg_node .clk_dbg_node.*))clk_dbg_node_end = .;
                . = ALIGN(8);blkpwr_start = .; KEEP(*(.blkpwr .blkpwr.*))blkpwr_end = .;
                . = ALIGN(8);vclk_grpgate_start = .; KEEP(*(.vclk_grpgate .vclk_grpgate.*))vclk_grpgate_end = .;
                . = ALIGN(8);vclk_pxmxdx_start = .; KEEP(*(.vclk_pxmxdx .vclk_pxmxdx.*))vclk_pxmxdx_end = .;
                . = ALIGN(8);vclk_umux_start = .; KEEP(*(.vclk_umux .vclk_umux.*))vclk_umux_end = .;
                . = ALIGN(8);vclk_m1d1g1_start = .; KEEP(*(.vclk_m1d1g1 .vclk_m1d1g1.*))vclk_m1d1g1_end = .;
                . = ALIGN(8);vclk_p1_start = .; KEEP(*(.vclk_p1 .vclk_p1.*))vclk_p1_end = .;
                . = ALIGN(8);vclk_m1_start = .; KEEP(*(.vclk_m1 .vclk_m1.*))vclk_m1_end = .;
                . = ALIGN(8);vclk_d1_start = .; KEEP(*(.vclk_d1 .vclk_d1.*))vclk_d1_end = .;
                . = ALIGN(8);vclk_dfs_start = .; KEEP(*(.vclk_dfs .vclk_dfs.*))vclk_dfs_end = .;
                . = ALIGN(8);clk_fixed_rate_start = .; KEEP(*(.clk_fixed_rate .clk_fixed_rate.*))clk_fixed_rate_end = .;
                . = ALIGN(8);clk_fixed_factor_start = .; KEEP(*(.clk_fixed_factor .clk_fixed_factor.*))clk_fixed_factor_end = .;
                . = ALIGN(8);clk_pll_start = .; KEEP(*(.clk_pll .clk_pll.*))clk_pll_end = .;
                . = ALIGN(8);clk_mux_start = .; KEEP(*(.clk_mux .clk_mux.*))clk_mux_end = .;
                . = ALIGN(8);clk_div_start = .; KEEP(*(.clk_div .clk_div.*))clk_div_end = .;
                . = ALIGN(8);clk_gate_start = .; KEEP(*(.clk_gate .clk_gate.*))clk_gate_end = .;

	     CONSTRUCTORS
		_edata = ABSOLUTE(.);
	} > sram AT > flash 
	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		. = ALIGN(4);
		_ebss = ABSOLUTE(.);
	} > sram

	/* Stabs debugging sections. */
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
